/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the authorised user
         * @description Gets the user that corresponds to the access token used in the request.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                403: components["responses"]["403"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user
         * @description Gets a user by ID. You must be authorised as the target user in order to make this request.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update user
         * @description Updates the user by their ID. You must be authorised as the target user in order to make this request.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A new name for the user.
                         * @example John Appleseed
                         */
                        name?: string;
                        /**
                         * @description A new time zone for the user.
                         * @example Auckland
                         */
                        time_zone?: string;
                        /**
                         * @description The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
                         * @example 1
                         */
                        week_start_day?: number;
                        /**
                         * @description Whether the user is a beta user, and wishes to try out new features.
                         * @example true
                         */
                        beta_user?: boolean;
                        /**
                         * @description A new base currency code for the user.
                         * @example nzd
                         */
                        base_currency_code?: string;
                        /**
                         * @description Whether the user wishes to have all monetary values converted to their base currency.
                         * @example true
                         */
                        always_show_base_currency?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/institutions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get institution
         * @description Gets an institution by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the institution.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Institution"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update institution
         * @description Updates the title and currency code for an institution.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the institution.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A new title for the institution.
                         * @example Bank of Foo
                         */
                        title?: string;
                        /**
                         * @description A new currency code for the institution.
                         * @example NZD
                         */
                        currency_code?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Institution"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        /**
         * Delete institution
         * @description Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
         */
        delete: {
            parameters: {
                query?: {
                    /**
                     * @description The unique identifier of the institution to merge into.
                     * @example 44
                     */
                    merge_into_institution_id?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the institution.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/institutions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List institutions in user
         * @description Lists all the institutions belonging to the user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Institution"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        /**
         * Create institution in user
         * @description Creates an institution belonging to a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A title for the institution.
                         * @example Bank of Foo
                         */
                        title: string;
                        /**
                         * @description A currency code for the institution.
                         * @example NZD
                         */
                        currency_code: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Institution"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account
         * @description Gets an account by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Account"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update account
         * @description Updates and returns an account by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A new title for the account.
                         * @example Savings
                         */
                        title?: string;
                        /**
                         * @description A new currency code for the account.
                         * @example NZD
                         */
                        currency_code?: string;
                        /**
                         * @description The type of the account.
                         * @example bank
                         * @enum {string}
                         */
                        type?: "bank" | "credits" | "cash" | "loans" | "mortgage" | "stocks" | "vehicle" | "property" | "insurance" | "other_asset" | "other_liability";
                        /**
                         * @description Whether the account is a net worth account.
                         * @example false
                         */
                        is_net_worth?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Account"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        /**
         * Delete account
         * @description Deletes an account and all its data by ID, optionally merge scenarios into another account.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List accounts in user
         * @description Lists all accounts belonging to the user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Account"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update the display order of accounts in user
         * @description Updates the display order of accounts belonging to the user, by accepting an array of accounts in their new display order.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description List the account objects in their new display order. */
                        accounts: components["schemas"]["Account"][];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Account"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Create an account in user
         * @description Creates and returns an account belonging to the user by their ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the institution to create this account in.
                         * @example 42
                         */
                        institution_id: number;
                        /**
                         * @description A title for the account.
                         * @example Foo
                         */
                        title: string;
                        /**
                         * @description A currency code for the account.
                         * @example NZD
                         */
                        currency_code: string;
                        /**
                         * @description The type of the account.
                         * @example bank
                         * @enum {string}
                         */
                        type: "bank" | "credits" | "cash" | "loans" | "mortgage" | "stocks" | "vehicle" | "property" | "insurance" | "other_asset" | "other_liability";
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Account"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/institutions/{id}/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List accounts in institution
         * @description Lists accounts belonging to an institution by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the institution.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Account"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction_accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get transaction account
         * @description Gets a transaction account by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionAccount"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update transaction account
         * @description Updates the transaction account by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The unique identifier of a new institution for the transaction account.
                         * @example 42
                         */
                        institution_id?: number;
                        /**
                         * @description The starting balance amount of the transaction account.
                         * @example 3547.45
                         */
                        starting_balance?: number;
                        /**
                         * @description The starting balance date of the transaction account.
                         * @example 2015-03-15
                         */
                        starting_balance_date?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionAccount"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/transaction_accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transaction accounts in user
         * @description List all transaction accounts belonging to a user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionAccount"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a transaction
         * @description Gets a transaction by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update a transaction
         * @description Updates a transaction by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A new memo for the transaction.
                         * @example Rent
                         */
                        memo?: string;
                        /**
                         * @description A new cheque number for the transaction.
                         * @example 503113643691
                         */
                        cheque_number?: string;
                        /**
                         * @description A new payee for the transaction.
                         * @example Bill
                         */
                        payee?: string;
                        /**
                         * @description A new amount for the transaction.
                         * @example 225
                         */
                        amount?: number;
                        /**
                         * @description A new date for the transaction.
                         * @example 2018-02-27
                         */
                        date?: string;
                        /**
                         * @description Whether the transaction is a transfer or not.
                         * @example false
                         */
                        is_transfer?: boolean;
                        /**
                         * @description The unique identifier of a new category for the transaction. Sending an empty string will uncategorize the transaction.
                         * @example 42
                         */
                        category_id?: number;
                        /** @description A new note for the transaction. */
                        note?: string;
                        /**
                         * @description Whether the transaction needs to be reviewed or not.
                         * @example false
                         */
                        needs_review?: boolean;
                        /**
                         * @description A new comma-separated set of labels for the transaction.
                         * @example foo,bar,baz
                         */
                        labels?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        /**
         * Delete transaction
         * @description Deletes a transaction and all its data by ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions in user
         * @description Lists transactions belonging to a user by their ID.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
                     * @example 2016-11-01
                     */
                    start_date?: string;
                    /**
                     * @description Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
                     * @example 2016-11-30
                     */
                    end_date?: string;
                    /**
                     * @description Limit to transactions updated since an ISO 8601 timestamp.
                     * @example 2020-10-14T09:20:33+13:00
                     */
                    updated_since?: string;
                    /**
                     * @description Limit to uncategorised transactions.
                     * @example 1
                     */
                    uncategorised?: number;
                    /**
                     * @description Limit to transactions of this type.
                     * @example debit
                     */
                    type?: "debit" | "credit";
                    /**
                     * @description Limit to transactions that need to be reviewed.
                     * @example 1
                     */
                    needs_review?: number;
                    /**
                     * @description Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
                     * @example Paypal
                     */
                    search?: string;
                    /**
                     * @description Choose a particular page of the results.
                     * @example 3
                     */
                    page?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions in account
         * @description Lists transactions belonging to an account by its ID.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
                     * @example 2016-11-01
                     */
                    start_date?: string;
                    /**
                     * @description Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
                     * @example 2016-11-30
                     */
                    end_date?: string;
                    /**
                     * @description Limit to transactions updated since an ISO 8601 timestamp.
                     * @example 2020-10-14T09:20:33+13:00
                     */
                    updated_since?: string;
                    /**
                     * @description Limit to uncategorised transactions.
                     * @example 1
                     */
                    uncategorised?: number;
                    /**
                     * @description Limit to transactions of this type.
                     * @example debit
                     */
                    type?: "debit" | "credit";
                    /**
                     * @description Limit to transactions that need to be reviewed.
                     * @example 1
                     */
                    needs_review?: number;
                    /**
                     * @description Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
                     * @example Paypal
                     */
                    search?: string;
                    /**
                     * @description Choose a particular page of the results.
                     * @example 3
                     */
                    page?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions in categories
         * @description Lists transactions belonging to one or more categories by their IDs.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
                     * @example 2016-11-01
                     */
                    start_date?: string;
                    /**
                     * @description Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
                     * @example 2016-11-30
                     */
                    end_date?: string;
                    /**
                     * @description Limit to transactions updated since an ISO 8601 timestamp.
                     * @example 2020-10-14T09:20:33+13:00
                     */
                    updated_since?: string;
                    /**
                     * @description Limit to uncategorised transactions.
                     * @example 1
                     */
                    uncategorised?: number;
                    /**
                     * @description Limit to transactions of this type.
                     * @example debit
                     */
                    type?: "debit" | "credit";
                    /**
                     * @description Limit to transactions that need to be reviewed.
                     * @example 1
                     */
                    needs_review?: number;
                    /**
                     * @description Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
                     * @example Paypal
                     */
                    search?: string;
                    /**
                     * @description Choose a particular page of the results.
                     * @example 3
                     */
                    page?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description A comma-separated list of category IDs.
                     * @example 42,43
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transaction_accounts/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List transactions in transaction account
         * @description Lists transactions belonging to a transaction account by its ID.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.
                     * @example 2016-11-01
                     */
                    start_date?: string;
                    /**
                     * @description Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.
                     * @example 2016-11-30
                     */
                    end_date?: string;
                    /**
                     * @description Limit to transactions updated since an ISO 8601 timestamp.
                     * @example 2020-10-14T09:20:33+13:00
                     */
                    updated_since?: string;
                    /**
                     * @description Limit to uncategorised transactions.
                     * @example 1
                     */
                    uncategorised?: number;
                    /**
                     * @description Limit to transactions of this type.
                     * @example debit
                     */
                    type?: "debit" | "credit";
                    /**
                     * @description Limit to transactions that need to be reviewed.
                     * @example 1
                     */
                    needs_review?: number;
                    /**
                     * @description Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.
                     * @example Paypal
                     */
                    search?: string;
                    /**
                     * @description Choose a particular page of the results.
                     * @example 3
                     */
                    page?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        /**
         * Create a transaction in transaction account
         * @description Creates a transaction in a transaction account by its ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The payee/merchant of the transaction.
                         * @example Tex Otago
                         */
                        payee: string;
                        /**
                         * @description The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.
                         * @example 11.5
                         */
                        amount: number;
                        /**
                         * @description The date when the transaction occurred.
                         * @example 2018-02-27
                         */
                        date: string;
                        /**
                         * @description Whether the transaction should be indicated as a transfer.
                         * @example false
                         */
                        is_transfer?: boolean;
                        /**
                         * @description A set of comma-separated labels for the transaction.
                         * @example lunch,mexican
                         */
                        labels?: string;
                        /**
                         * @description The unique identifier of a category for the transaction.
                         * @example 42
                         */
                        category_id?: number;
                        /**
                         * @description A note for the transaction.
                         * @example I really enjoyed the loaded corn chips
                         */
                        note?: string;
                        /** @description A memo for the transaction. */
                        memo?: string;
                        /** @description A cheque number for the transaction. */
                        cheque_number?: string;
                        /**
                         * @description Whether the transaction needs to be reviewed or not.
                         * @example false
                         */
                        needs_review?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Transaction"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get category
         * @description Gets a particular category by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the category.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Category"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update category
         * @description Updates a category by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the category.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A new title for the category.
                         * @example Food
                         */
                        title?: string;
                        /**
                         * @description A new CSS-style hex colour for the category.
                         * @example #e0e7ff
                         */
                        colour?: string;
                        /**
                         * @description The unique identifier of a parent category for the category, making this category a child of that category.
                         * @example 42
                         */
                        parent_id?: number;
                        /**
                         * @description Set the category as a transfer category.
                         * @example false
                         */
                        is_transfer?: boolean;
                        /**
                         * @description Set the category as a bill category.
                         * @example true
                         */
                        is_bill?: boolean;
                        /**
                         * @description Set the category to be rolled up into its parent category.
                         * @example false
                         */
                        roll_up?: boolean;
                        /**
                         * @description Set the refund behaviour of the category.
                         * @example credits_are_refunds
                         * @enum {string|null}
                         */
                        refund_behaviour?: "debits_are_deductions" | "credits_are_refunds" | null;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Category"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        /**
         * Delete category
         * @description Deletes a particular category by its ID. This will delete all budgets within the category, and uncategorize all transactions assigned to the category.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the category.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List categories in user
         * @description Lists all categories belonging to a user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Category"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        /**
         * Create category in user
         * @description Creates a category belonging to the user by their ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description A title for the category.
                         * @example Food
                         */
                        title: string;
                        /**
                         * @description A CSS-style hex colour for the category.
                         * @example #e0e7ff
                         */
                        colour?: string;
                        /**
                         * @description The unique identifier of a category to be the parent of this category.
                         * @example 42
                         */
                        parent_id?: number;
                        /**
                         * @description Set the category as a transfer category.
                         * @example false
                         */
                        is_transfer?: boolean;
                        /**
                         * @description Set the category as a bill category.
                         * @example true
                         */
                        is_bill?: boolean;
                        /**
                         * @description Set the category to be rolled up into its parent category.
                         * @example false
                         */
                        roll_up?: boolean;
                        /**
                         * @description Set the refund behaviour of the category.
                         * @example credits_are_refunds
                         * @enum {string|null}
                         */
                        refund_behaviour?: "debits_are_deductions" | "credits_are_refunds" | null;
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Category"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/category_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List category rules in user
         * @description Lists all category rules belonging to a user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CategoryRule"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{id}/category_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create category rule in category
         * @description Creates a rule to allocate a category to transactions.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the category.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The keyword/s to match the transaction payees.
                         * @example Countdown
                         */
                        payee_matches: string;
                        /**
                         * @description Apply the created category rule to all uncategorised transactions.
                         * @example true
                         */
                        apply_to_uncategorised?: boolean;
                        /**
                         * @description Apply the created category rule to all transactions.
                         * @example false
                         */
                        apply_to_all?: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CategoryRule"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/budget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List budget for user
         * @description Lists the user's budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description Whether parent categories should have their children rolled up into them. When used, the children will still appear in the collection on their own, but their actual and forecast figures will be rolled up to the root parent.
                     * @example true
                     */
                    roll_up?: boolean;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the account.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BudgetAnalysisPackage"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/budget_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get budget summary for user
         * @description Get the user's budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.
                     * @example weeks
                     */
                    period: "weeks" | "months" | "years" | "event";
                    /**
                     * @description The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.
                     * @example 2
                     */
                    interval: number;
                    /**
                     * @description The date to start analysing the budget from. This will be bumped out to make full periods as necessary.
                     * @example 2016-11-01
                     */
                    start_date: string;
                    /**
                     * @description The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.
                     * @example 2016-11-30
                     */
                    end_date: string;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BudgetAnalysisPackage"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/trend_analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trend analysis for user
         * @description Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.
                     * @example weeks
                     */
                    period: "weeks" | "months" | "years" | "event";
                    /**
                     * @description The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.
                     * @example true
                     */
                    interval: number;
                    /**
                     * @description The date to start analysing the budget from. This will be bumped out to make full periods as necessary.
                     * @example 2016-11-01
                     */
                    start_date: string;
                    /**
                     * @description The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.
                     * @example 2016-11-30
                     */
                    end_date: string;
                    /**
                     * @description A comma-separated list of category IDs to analyse.
                     * @example 42,49
                     */
                    categories: string;
                    /**
                     * @description A comma-separated list of scenario IDs to analyse. You're likely going to want to include all a user's scenarios here, unless you have reason to only analyse for a subset of scenarios. Regardless of what scenarios are analysed, all actuals (transactions) across all accounts will be included.
                     * @example 11,29
                     */
                    scenarios: string;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BudgetAnalysisPackage"][];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/forecast_cache": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete forecast cache for user
         * @description Delete the user's cached forecast by recalculating the forecast.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get event
         * @description Gets a particular event by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the event.
                     * @example 42-1601942400
                     */
                    id: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update event
         * @description Updates an event by its ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the event.
                     * @example 42-1601942400
                     */
                    id: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Whether the update applies only to this event, to all events within the series from this event or to all events within the series.
                         * @example all
                         * @enum {string}
                         */
                        behaviour: "one" | "forward" | "all";
                        /**
                         * @description The amount of the event. A positive amount is a credit, and a negative amount is a debit.
                         * @example 11.5
                         */
                        amount?: number;
                        /**
                         * @description The repeat type of the event.
                         * @example weekly
                         * @enum {string}
                         */
                        repeat_type?: "once" | "daily" | "weekly" | "fortnightly" | "monthly" | "yearly" | "each weekday";
                        /**
                         * @description The repeat interval of the event.
                         * @example 1
                         */
                        repeat_interval?: number;
                        /**
                         * @description A note for the event.
                         * @example Need more beer.
                         */
                        note?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                409: components["responses"]["409"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        /**
         * Delete event
         * @description Deletes an event by its ID.
         */
        delete: {
            parameters: {
                query: {
                    /** @description Whether the delete applies only to this event, to all events within the series from this event or to all events within the series. */
                    behaviour: "one" | "forward" | "all";
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the event.
                     * @example 42-1601942400
                     */
                    id: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["400"];
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                409: components["responses"]["409"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events in user.
         * @description Lists events belonging to a user by their ID.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Return the events from and including this date.
                     * @example 2020-10-01
                     */
                    start_date: string;
                    /**
                     * @description Return the events until and including this date.
                     * @example 2020-10-30
                     */
                    end_date: string;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: components["parameters"]["userId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List events in scenario.
         * @description Lists events belonging to a scenario by their ID.
         */
        get: {
            parameters: {
                query: {
                    /**
                     * @description Return the events from and including this date.
                     * @example 2020-10-01
                     */
                    start_date: string;
                    /**
                     * @description Return the events until and including this date.
                     * @example 2020-10-30
                     */
                    end_date: string;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the scenario.
                     * @example 42
                     */
                    id: components["parameters"]["scenarioId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        /**
         * Create event in scenario
         * @description Creates an event in a scenario by its ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the scenario.
                     * @example 42
                     */
                    id: components["parameters"]["scenarioId"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The unique identifier of the category for the event.
                         * @example 42
                         */
                        category_id: number;
                        /**
                         * @description The starting date of the event.
                         * @example 2020-10-27
                         */
                        date: string;
                        /**
                         * @description The amount of the event. A positive amount is a credit, and a negative amount is a debit.
                         * @example 11.5
                         */
                        amount: number;
                        /**
                         * @description The repeat type of the event.
                         * @example weekly
                         * @enum {string}
                         */
                        repeat_type: "once" | "daily" | "weekly" | "fortnightly" | "monthly" | "yearly" | "each weekday";
                        /**
                         * @description The repeat interval of the event.
                         * @default 1
                         * @example 1
                         */
                        repeat_interval?: number;
                        /**
                         * @description A note for the event.
                         * @example New beers for sampling over the weekends.
                         */
                        note?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                409: components["responses"]["409"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/attachments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attachment
         * @description Gets a particular attachment by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the attachment.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Attachment"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        /**
         * Update attachment
         * @description Updates the title of the attachment.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the attachment.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The new title of the attachment. If the title is blank or not provided, the server will derive a title from the file name.
                         * @example Invoice for taxi
                         */
                        title?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Attachment"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        post?: never;
        /**
         * Delete attachment
         * @description Deletes a particular attachment by its ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the attachment.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists attachments in user
         * @description Lists attachments belonging to a user by their ID.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description If set, returns unassigned attachments, that are available for assigning to a transaction.
                     * @example 1
                     */
                    unassigned?: number;
                };
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Attachment"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        /**
         * Create attachment in user
         * @description Creates an attachment belonging to the user by their ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The title of the attachment. If the title is blank or not provided, the title will derived from the file name.
                         * @example Invoice for taxi
                         */
                        title?: string;
                        /**
                         * @description The file name of the attachment.
                         * @example taxi.png
                         */
                        file_name?: string;
                        /**
                         * Format: base64
                         * @description The base64-encoded contents of the source file. The supported file types are png, jpg, pdf, xls, xlsx, doc, docx.
                         */
                        file_data?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Attachment"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
                422: components["responses"]["422"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{id}/attachments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List attachments in transaction
         * @description Lists attachments belonging to a transaction by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Attachment"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        /**
         * Assigns attachment to transaction
         * @description Assigns an attachment to the transaction by their ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction.
                     * @example 42
                     */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The unique identifier of the attachment.
                         * @example 1438154
                         */
                        attachment_id?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Attachment"];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transaction_id}/attachments/{attachment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unassigns attachment in transaction
         * @description Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the transaction.
                     * @example 42
                     */
                    transaction_id: number;
                    /**
                     * @description The unique identifier of the attachment.
                     * @example 1438154
                     */
                    attachment_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List labels in user
         * @description Lists labels belonging to a user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: components["parameters"]["userId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       "craftbeer",
                         *       "bargains",
                         *       "gaming",
                         *       "Trip to Auckland"
                         *     ] */
                        "application/json": string[];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/saved_searches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List saved searches in user
         * @description Lists saved searches belonging to a user by their ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the user.
                     * @example 42
                     */
                    id: components["parameters"]["userId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SavedSearch"][];
                    };
                };
                403: components["responses"]["403"];
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List currencies
         * @description Lists currencies supported by PocketSmith.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Currency"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/currencies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get currency
         * @description Gets a particular currency by its ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The unique identifier of the currency.
                     * @example nzd
                     */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Currency"];
                    };
                };
                404: components["responses"]["404"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/time_zones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List time zones
         * @description Lists time zones.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeZone"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /**
             * @description The unique identifier of the user.
             * @example 42
             */
            id?: number;
            /**
             * @description The user's username.
             * @example sampleuser69
             */
            login?: string;
            /**
             * @description The full name of the user, although not all users will have a name set.
             * @example Foo Barrington
             */
            name?: string;
            /**
             * @description The user's email address.
             * @example user69@sample.com
             */
            email?: string;
            /**
             * @description The URL to the user's avatar.
             * @example https://image.com/image.png
             */
            avatar_url?: string;
            /**
             * @description Whether the user has opted in to beta features.
             * @example true
             */
            beta_user?: boolean;
            /**
             * @description The user's time zone.
             * @example Auckland
             */
            time_zone?: string;
            /**
             * @description The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
             * @example 1
             */
            week_start_day?: number;
            /**
             * @description Whether the user wants to review new transactions, transfer transactions or categorisation.
             * @example true
             */
            is_reviewing_transactions?: boolean;
            /**
             * @description The user's base currency.
             * @example NZD
             */
            base_currency_code?: string;
            /**
             * @description Whether the user wants to see all accounts in their base currency instead of the native account currency.
             * @example false
             */
            always_show_base_currency?: boolean;
            /**
             * @description Whether the user has multiple currencies in use across their account.
             * @example true
             */
            using_multiple_currencies?: boolean;
            /**
             * @description The user's total number of available accounts.
             * @example 3
             */
            available_accounts?: number;
            /**
             * @description The user's total number of available budgets.
             * @example 3
             */
            available_budgets?: number;
            /**
             * @description When the user's forecast was last updated.
             * @example 2015-07-02T22:14:49Z
             */
            forecast_last_updated_at?: string;
            /**
             * @description When the user's forecast was last accessed.
             * @example 2015-07-02T22:14:49Z
             */
            forecast_last_accessed_at?: string;
            /**
             * @description The date that the user's forecast starts.
             * @example 2015-07-01
             */
            forecast_start_date?: string;
            /**
             * @description The date that the user's forecast ends.
             * @example 2015-07-15
             */
            forecast_end_date?: string;
            /**
             * @description Whether the user's forecast recalculation should be deferred.
             * @example false
             */
            forecast_defer_recalculate?: boolean;
            /**
             * @description Whether the user's forecast needs to be recalculated.
             * @example true
             */
            forecast_needs_recalculate?: boolean;
            /**
             * @description When the user last logged into PocketSmith.
             * @example 2015-07-02T22:14:49Z
             */
            last_logged_in_at?: string;
            /**
             * @description When the user last interacted with PocketSmith, via any application or the API.
             * @example 2015-07-02T22:14:49Z
             */
            last_activity_at?: string;
            /**
             * @description When the user signed up.
             * @example 2015-07-02T22:14:49Z
             */
            created_at?: string;
            /**
             * @description When the user was last updated.
             * @example 2015-07-02T22:14:49Z
             */
            updated_at?: string;
        };
        Institution: {
            /**
             * @description The currency code of the institution.
             * @example NZD
             */
            currency_code?: string;
            /**
             * @description The title of the institution.
             * @example Bank of Foo
             */
            title?: string;
            /**
             * @description When the institution was last updated.
             * @example 2015-04-21T22:42:22Z
             */
            updated_at?: string;
            /**
             * @description When the institution was created.
             * @example 2015-04-21T22:42:22Z
             */
            created_at?: string;
            /**
             * @description The unique identifier of the institution.
             * @example 57
             */
            id?: number;
        };
        Account: {
            /**
             * @description The unique identifier of the account.
             * @example 42
             */
            id?: number;
            /**
             * @description The title of the account.
             * @example Bank of Foo
             */
            title?: string;
            /**
             * @description The currency code for the account.
             * @example NZD
             */
            currency_code?: string;
            /**
             * @description The type of the account.
             * @example bank
             * @enum {string}
             */
            type?: "bank" | "credits" | "cash" | "stocks" | "mortgage" | "loans" | "vehicle" | "property" | "insurance" | "other_asset" | "other_liability";
            /**
             * @description Whether the account is a net worth asset.
             * @example false
             */
            is_net_worth?: boolean;
            primary_transaction_account?: components["schemas"]["TransactionAccount"];
            primary_scenario?: components["schemas"]["Scenario"];
            /** @description All transaction accounts that compose the account, including the primary. */
            transaction_accounts?: components["schemas"]["TransactionAccount"][];
            /** @description All scenarios that compose the account, including the primary. */
            scenarios?: components["schemas"]["Scenario"][];
            /**
             * @description When the account was created.
             * @example 2018-02-27
             */
            created_at?: string;
            /**
             * @description When the account was last updated.
             * @example 2018-02-27
             */
            updated_at?: string;
            /**
             * @description The current balance of the account.
             * @example 2694.39
             */
            current_balance?: number;
            /**
             * @description The date of the current balance.
             * @example 2018-02-27
             */
            current_balance_date?: string;
            /**
             * @description The current balance of the account in the user's base currency.
             * @example 4041.59
             */
            current_balance_in_base_currency?: number;
            /**
             * @description The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
             * @example 1.5
             */
            current_balance_exchange_rate?: number;
            /**
             * @description The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
             * @example 2694.39
             */
            safe_balance?: number;
            /**
             * @description The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
             * @example 4041.59
             */
            safe_balance_in_base_currency?: number;
        };
        TransactionAccount: {
            /** @example 96027 */
            id?: number;
            /** @example Sample Credit */
            name?: string;
            /** @example ASBCRD44554 */
            number?: string;
            /** @example 2694.39 */
            current_balance?: number;
            /** @example 2015-07-03 */
            current_balance_date?: string;
            /**
             * @description The current balance of the transaction account in the user's base currency.
             * @example 4041.59
             */
            current_balance_in_base_currency?: number;
            /**
             * @description The exchange rate between the transaction account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
             * @example 1.5
             */
            current_balance_exchange_rate?: number;
            /**
             * @description The current safe balance, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.
             * @example 2694.39
             */
            safe_balance?: number;
            /**
             * @description The current safe balance in the user's base currency, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.
             * @example 4041.59
             */
            safe_balance_in_base_currency?: number;
            /** @example 3547.45 */
            starting_balance?: number;
            /** @example 2015-03-15 */
            starting_balance_date?: string;
            /** @example 2015-03-17T02:42:10Z */
            created_at?: string;
            /** @example 2015-07-02T22:14:49Z */
            updated_at?: string;
            institution?: components["schemas"]["Institution"];
            /**
             * @description The currency that the account is in. This is determined by the account that the transaction account belongs to.
             * @example NZD
             */
            currency_code?: string;
            /**
             * @description The type of the transaction account.
             * @example bank
             * @enum {string}
             */
            type?: "bank" | "credits" | "cash" | "stocks" | "mortgage" | "loans" | "vehicle" | "property" | "insurance" | "other_asset" | "other_liability";
        };
        Scenario: {
            /**
             * @description The unique identifier of the scenario.
             * @example 42
             */
            id?: number;
            /**
             * @description The title of the scenario.
             * @example Wedding
             */
            title?: string;
            /** @description A short description of what the scenario is modelling. */
            description?: string;
            /**
             * @description The amount of interest to apply to the balance. Will apply periodically depending on what `interest_rate_repeat_id` is set to.
             * @example 2.4
             */
            interest_rate?: number;
            /**
             * @description A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.
             * @example 4
             */
            interest_rate_repeat_id?: number;
            /**
             * @description The type of the scenario.
             * @example no-interest
             * @enum {string}
             */
            type?: "no-interest" | "savings" | "debt";
            /** @example 4000 */
            "minimum-value"?: number;
            /** @example 42 */
            "maximum-value"?: number;
            /** @description For goals, the date that they should be achieved by. */
            achieve_date?: string;
            /**
             * @description The starting balance of the scenario.
             * @example 2450
             */
            starting_balance?: number;
            /**
             * @description The date of the starting balance.
             * @example 2018-02-27
             */
            starting_balance_date?: string;
            /**
             * @description The closing balance of the scenario.
             * @example 5431.2
             */
            closing_balance?: number;
            /**
             * @description The date of the closing balance.
             * @example 2018-02-27
             */
            closing_balance_date?: string;
            /**
             * @description The current balance of the scenario.
             * @example 5431.2
             */
            current_balance?: number;
            /**
             * @description The date of the current balance.
             * @example 2018-02-27
             */
            current_balance_date?: string;
            /**
             * @description The current balance of the scenario in the user's base currency.
             * @example 8146.8
             */
            current_balance_in_base_currency?: number;
            /**
             * @description The exchange rate between the scenario's currency and the user's base currency, when different. If the currencies are the same, null is returned.
             * @example 1.5
             */
            current_balance_exchange_rate?: number;
            /**
             * @description The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.
             * @example 5431.2
             */
            safe_balance?: number;
            /**
             * @description The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.
             * @example 8146.8
             */
            safe_balance_in_base_currency?: number;
            /**
             * @description When the scenario was created.
             * @example 2015-04-21T22:42:22Z
             */
            created_at?: string;
            /**
             * @description When the scenario was last updated.
             * @example 2015-04-21T22:42:22Z
             */
            updated_at?: string;
        };
        Transaction: {
            /** @example 503113643691 */
            cheque_number?: string;
            /**
             * @description Whether the transaction is a debit or a credit
             * @example credit
             * @enum {string}
             */
            type?: "debit" | "credit";
            /** @example An example memo */
            memo?: string;
            /**
             * @description The payee/merchant of the transaction.
             * @example St Martins New World
             */
            payee?: string;
            /** @example 34.6 */
            amount?: number;
            /**
             * @description The amount of the transaction in the user's base currency.
             * @example 51.9
             */
            amount_in_base_currency?: number;
            /**
             * @description The date the transaction took place.
             * @example 2018-02-27
             */
            date?: string;
            /**
             * @description Whether the transaction is a transfer.
             * @example false
             */
            is_transfer?: boolean;
            category?: components["schemas"]["Category"];
            /** @example I spent way too much on cheese here */
            note?: string;
            /** @example [
             *       "foo",
             *       "bar",
             *       "baz"
             *     ] */
            labels?: string[];
            /**
             * @description The unique identifier of the transaction.
             * @example 42
             */
            id?: number;
            /**
             * @description The payee the transaction was created with.
             * @example CARD4083ST MARTINS NEW WORLD CHRISTCHURCH
             */
            original_payee?: string;
            /**
             * @description Where the transaction came from.
             * @example file
             */
            upload_source?: string;
            /**
             * @description The closing balance of the account at the transaction.
             * @example 4312.32
             */
            closing_balance?: number;
            transaction_account?: components["schemas"]["TransactionAccount"];
            /**
             * @description The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
             * @enum {string}
             */
            status?: "pending" | "posted";
            /**
             * @description Whether the transaction needs to be reviewed.
             * @example true
             */
            needs_review?: boolean;
            /**
             * @description When the transaction was created.
             * @example 2018-02-27T22:42:22Z
             */
            created_at?: string;
            /**
             * @description When the transaction was last updated.
             * @example 2018-02-27T22:42:22Z
             */
            updated_at?: string;
        };
        Category: {
            /**
             * @description The unique identifier of the category.
             * @example 1438154
             */
            id?: number;
            /**
             * @description The title of the category.
             * @example Beer
             */
            title?: string;
            /**
             * Format: CSS-style hex triplet
             * @description The colour for the category.
             * @example #00ff00
             */
            colour?: string;
            /** @description The category's child categories. */
            children?: components["schemas"]["Category"][];
            /**
             * @description The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)
             * @example 42
             */
            parent_id?: number;
            /**
             * @description Whether this category has been marked as a transfer category.
             * @example false
             */
            is_transfer?: boolean;
            /**
             * @description Whether the category is a bill category. A bill category is when budgeted amounts are normally spent at once, instead of spread across a budgeting period. This category will be included in the bill reminder email when set to true.
             * @example true
             */
            is_bill?: boolean;
            /**
             * @description Whether the category's budget is rolled up into its parent category, if a parent category is present.
             * @example false
             */
            roll_up?: boolean;
            /**
             * @description How the category's refunds or deductions should be reported on.
             * @example credits_are_refunds
             * @enum {string|null}
             */
            refund_behaviour?: "debits_are_deductions" | "credits_are_refunds" | null;
            /**
             * Format: ISO 8601 timestamp
             * @description When the category was created.
             * @example 2015-08-16T02:17:02Z
             */
            created_at?: string;
            /**
             * Format: ISO 8601 timestamp
             * @description When the category was last updated.
             * @example 2015-08-16T02:17:02Z
             */
            updated_at?: string;
        };
        CategoryRule: {
            category?: components["schemas"]["Category"];
            /**
             * @description The unique identifier of the category rule.
             * @example 1438154
             */
            id?: number;
            /**
             * @description The keyword/s to match the transactions payees.
             * @example Countdown
             */
            payee_matches?: string;
            /**
             * Format: ISO 8601 timestamp
             * @description When the category rule was created.
             * @example 2019-07-09T10:06:02Z
             */
            created_at?: string;
            /**
             * Format: ISO 8601 timestamp
             * @description When the category rule was last updated.
             * @example 2019-07-09T10:06:02Z
             */
            updated_at?: string;
        };
        BudgetAnalysis: {
            /**
             * @description The start date of the budget analysis.
             * @example 2016-11-01
             */
            start_date?: string;
            /**
             * @description The end date of the budget analysis.
             * @example 2016-11-30
             */
            end_date?: string;
            /**
             * @description The currency of the budget analysis.
             * @example nzd
             */
            currency_code?: string;
            /**
             * @description The total actual (transactions) amount across all periods.
             * @example -42.3
             */
            total_actual_amount?: number;
            /**
             * @description The average actual (transactions) amount across all periods.
             * @example -42.3
             */
            average_actual_amount?: number;
            /**
             * @description The total budgeted amount across all periods.
             * @example -60
             */
            total_forecast_amount?: number;
            /**
             * @description The average budgeted amount across all periods.
             * @example -60
             */
            average_forecast_amount?: number;
            /**
             * @description The total amount the budget was exceeded across all periods.
             * @example 0
             */
            total_over_by?: number;
            /**
             * @description The total amount the budget was under by across all periods.
             * @example 17.7
             */
            total_under_by?: number;
            /** @description The period analyses that this budget analysis comprises. */
            periods?: components["schemas"]["Period"][];
        };
        Period: {
            /**
             * @description The start date of the period.
             * @example 2016-11-01
             */
            start_date?: string;
            /**
             * @description The end date of the period.
             * @example 2016-11-30
             */
            end_date?: string;
            /**
             * @description The currency of the period.
             * @example nzd
             */
            currency_code?: string;
            /**
             * @description The sum of all actuals (transactions) in the period.
             * @example -42.3
             */
            actual_amount?: number;
            /**
             * @description The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.
             * @example -60
             */
            forecast_amount?: number;
            /**
             * @description This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to "always expense", any credit transactions are treated as refunds and when set to "always income", any debit transactions are treated as deductions.
             * @example 5.6
             */
            refund_amount?: number;
            /**
             * @description Whether this period is current, such that the current date (in the user's time zone) falls within the date range.
             * @example true
             */
            current?: boolean;
            /**
             * @description Whether the budget has been exceeded in the period.
             * @example false
             */
            over_budget?: boolean;
            /**
             * @description Whether the budget has not been exceeded in the period.
             * @example true
             */
            under_budget?: boolean;
            /**
             * @description How much the budget has been exceeded by in the period.
             * @example 0
             */
            over_by?: number;
            /**
             * @description How much there is left in the budget for the period.
             * @example 17.7
             */
            under_by?: number;
            /**
             * @description The percentage of the budget that has been used in the period.
             * @example 70.5
             */
            percentage_used?: number;
        };
        BudgetAnalysisPackage: {
            category?: components["schemas"]["Category"];
            /**
             * @description Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.
             * @example false
             */
            is_transfer?: boolean;
            expense?: components["schemas"]["BudgetAnalysis"];
            income?: components["schemas"]["BudgetAnalysis"];
        };
        Event: {
            /**
             * @description The unique identifier of the event.
             * @example 42-1601942400
             */
            id?: string;
            category?: components["schemas"]["Category"];
            scenario?: components["schemas"]["Scenario"];
            /**
             * @description The amount of the event.
             * @example 250.5
             */
            amount?: number;
            /**
             * @description The amount of the event in the user's base currency.
             * @example 375.75
             */
            amount_in_base_currency?: number;
            /**
             * @description The currency code of the event.
             * @example nzd
             */
            currency_code?: string;
            /**
             * @description The date of the event.
             * @example 2020-10-27
             */
            date?: string;
            /**
             * @description The CSS hex-style colour of the event.
             * @example #F63737
             */
            colour?: string;
            /**
             * @description The note of the event.
             * @example Buy more beer every Friday from the local brewery.
             */
            note?: string;
            /**
             * @description The repeat type of the event.
             * @example weekly
             * @enum {string}
             */
            repeat_type?: "once" | "daily" | "weekly" | "fortnightly" | "monthly" | "yearly" | "each weekday";
            /**
             * @description The repeat interval of how often the event takes place.
             * @example 1
             */
            repeat_interval?: number;
            /**
             * @description The unique identifier of the series that the event belongs to.
             * @example 42
             */
            series_id?: number;
            /**
             * @description The unique identifier of the series followed by the series's start date.
             * @example 42-1593993600
             */
            series_start_id?: string;
            /**
             * @description Whether the event repeats and does not have an end date.
             * @example true
             */
            infinite_series?: boolean;
        };
        Attachment: {
            /**
             * @description The unique identifier of the attachment
             * @example 42
             */
            id?: number;
            /**
             * @description The title of the attachment. If blank or not provided, the title will be derived from the file name.
             * @example Invoice for taxi
             */
            title?: string;
            /**
             * @description The file name of the attachment.
             * @example taxi.png
             */
            file_name?: string;
            /**
             * @description The type of attachment.
             * @example image
             */
            type?: string;
            /**
             * @description The content type of the attachment.
             * @example image/png
             */
            content_type?: string;
            content_type_meta?: {
                /**
                 * @description The content type title of the attachment.
                 * @example PNG
                 */
                title?: string;
                /**
                 * @description The content type description of the attachment.
                 * @example PNG image
                 */
                description?: string;
                /**
                 * @description The extension type of the attachment.
                 * @example png
                 */
                extension?: string;
            };
            /**
             * @description The url of the attachment.
             * @example https://image.com/image.png
             */
            original_url?: string;
            variants?: {
                /**
                 * @description The url of the large version of the attachment.
                 * @example https://image.com/image.png
                 */
                large_url?: string;
                /**
                 * @description The url of the thumb version of the attachment.
                 * @example https://image.com/image.png
                 */
                thumb_url?: string;
            };
            /**
             * Format: ISO 8601 timestamp
             * @description When the attachment was created.
             * @example 2015-08-16T02:17:02Z
             */
            created_at?: string;
            /**
             * Format: ISO 8601 timestamp
             * @description When the attachment was last updated.
             * @example 2015-08-16T02:17:02Z
             */
            updated_at?: string;
        };
        SavedSearch: {
            /**
             * @description The unique identifier of the saved search.
             * @example 42
             */
            id?: number;
            /**
             * @description The title of the saved search.
             * @example Craft beer
             */
            title?: string;
            /**
             * Format: ISO 8601 timestamp
             * @description When the saved search was created.
             * @example 2015-08-16T02:17:02Z
             */
            created_at?: string;
            /**
             * Format: ISO 8601 timestamp
             * @description When the saved search was last updated.
             * @example 2015-08-16T02:17:02Z
             */
            updated_at?: string;
        };
        Currency: {
            /**
             * @description The ISO 4217 or unofficial currency code.
             * @example nzd
             */
            id?: string;
            /**
             * @description The name of the currency.
             * @example New Zealand Dollar
             */
            name?: string;
            /**
             * @description The number of digits after the minor unit separator.
             * @example 2
             */
            minor_unit?: number;
            separators?: components["schemas"]["CurrencySeparators"];
            /**
             * @description The symbol of the currency.
             * @example $
             */
            symbol?: string;
        };
        CurrencySeparators: {
            /**
             * @description The separator used in the major unit.
             * @example ,
             */
            major?: string;
            /**
             * @description The seperator used for the minor unit.
             * @example .
             */
            minor?: string;
        };
        TimeZone: {
            /**
             * @description The name of the time zone.
             * @example Auckland
             */
            name?: string;
            /**
             * @description The time zone's UTC offset in seconds.
             * @example 46800
             */
            utc_offset?: number;
            /**
             * @description The formatted name of the time zone.
             * @example (GMT+13:00) Auckland
             */
            formatted_name?: string;
            /**
             * @description The formatted offset of the time zone.
             * @example +13:00
             */
            formatted_offset?: string;
            /**
             * @description The abbreviation of the time zone.
             * @example NZDT
             */
            abbreviation?: string;
            /**
             * @description The tz database name of the time zone.
             * @example Pacific/Auckland
             */
            identifier?: string;
        };
        Error: {
            /**
             * @description A message describing the error that occurred.
             * @example A message describing the error that occurred.
             */
            error?: string;
        };
    };
    responses: {
        /** @description Bad Request */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Allowed */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict */
        409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Validation Error */
        422: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /**
         * @description The unique identifier of the user.
         * @example 42
         */
        userId: number;
        /**
         * @description The unique identifier of the scenario.
         * @example 42
         */
        scenarioId: number;
        /**
         * @description The unique identifier of the event.
         * @example 42-1601942400
         */
        eventId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
